generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_iNJOWapD7Lw9@ep-fragrant-wind-adhwtdx4-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

model user {
  id                 Int          @id @default(autoincrement())
  username           String       @unique
  password           Int
  name               String?
  phone              String?
  isAdmin            Boolean      @default(false)
  isCashier          Boolean      @default(false)
  isWaiter           Boolean      @default(true)
  isKitchenUser      Boolean      @default(false)
  isHomeDeliveryUser Boolean      @default(false)
  kots               kot[]
  orders             order[]      @relation("createdOrders")
  deliveryOrders     order[]      @relation("deliveryOrders")
  createdOrderItems  orderItem[]  @relation("createdUser")
  posSession         posSession[]
}

model product {
  id                    Int             @id @default(autoincrement())
  code                  Int             @default(1)
  name                  String
  secondaryLanguageName String?
  price                 Float
  cost                  Float
  image                 String          @default("")
  inStock               Boolean         @default(true)
  hasVariant            Boolean         @default(false)
  hasModifiers          Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  isArchived            Boolean         @default(false)
  collectionId          Int
  qwickViewOrder        Int?            @default(1)
  categoryId            Int
  color                 String          @default("")
  description           String          @default("product details")
  printName             String          @default("Not Added")
  notes                 String[]        @default([])
  modifierGroup         modifierGroup[]
  orderItem             orderItem[]
  category              category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  collection            collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  variants              variant[]
}

model category {
  id                Int       @id @default(autoincrement())
  name              String
  categoryCode      Int       @default(1)
  color             String
  kitchenId         Int
  isAvailableAllDay Boolean   @default(true)
  startTime         String    @default("")
  endTime           String    @default("")
  kitchen           kitchen   @relation(fields: [kitchenId], references: [id])
  products          product[]
}

model collection {
  id       Int       @id @default(autoincrement())
  name     String
  products product[]
}

model kitchen {
  id             Int        @id @default(autoincrement())
  name           String
  printer        String
  shouldPrintKot Boolean    @default(true)
  categories     category[]
  kots           kot[]
}

model variant {
  id        Int     @id @default(autoincrement())
  name      String
  price     Float
  productId Int
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model modifier {
  id              Int               @id @default(autoincrement())
  name            String
  price           Float
  modifierGroupId Int?
  orderItemId     Int?
  modifierGroup   modifierGroup?    @relation(fields: [modifierGroupId], references: [id])
  orderItem       orderItem?        @relation(fields: [orderItemId], references: [id])
  modifierapplied modifierapplied[]
}

model modifierGroup {
  id                    Int        @id @default(autoincrement())
  description           String?
  price                 Float?
  image                 String?
  printName             String?
  printModifiersAsItems Boolean    @default(false)
  productId             Int
  modifiers             modifier[]
  product               product    @relation(fields: [productId], references: [id])
}

model order {
  id              Int              @id @default(autoincrement())
  orderNumber     Int
  paymentStatus   String
  orderStatus     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tableId         Int?
  createdUserId   Int
  orderType       String           @default("table")
  customerName    String?
  customerId      Int              @default(1)
  deliveryUserId  Int?
  paymentMode     String           @default("")
  paidAmount      Float?
  discountApplied Float?
  balance         Float?
  notes           String[]         @default([])
  appliedcharges  appliedcharges[]
  kot             kot[]
  user            user             @relation("createdOrders", fields: [createdUserId], references: [id])
  customer        customer         @relation(fields: [customerId], references: [id])
  deliveryUser    user?            @relation("deliveryOrders", fields: [deliveryUserId], references: [id])
  table           table?           @relation(fields: [tableId], references: [id])
  orderItems      orderItem[]
  payments        payments[]
}

model customer {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String  @default("Spider")
  type      String  @default("table")
  order     order[]
}

model orderItem {
  id               Int               @id @default(autoincrement())
  customeKey       String
  name             String
  kotNumber        Int
  orderId          Int
  userId           Int?
  status           String?
  orderItemType    String            @default("new")
  message          String            @default("")
  count            Int
  modifiers        String            @default("")
  amount           Float             @default(0)
  productId        Int               @default(1)
  note             String            @default("")
  modifier         modifier[]
  modifiersapplied modifierapplied[]
  Kot              kot               @relation(fields: [kotNumber], references: [id])
  order            order             @relation(fields: [orderId], references: [id])
  product          product           @relation(fields: [productId], references: [id])
  createdUser      user?             @relation("createdUser", fields: [userId], references: [id])
}

model modifierapplied {
  id          Int       @id @default(autoincrement())
  modifierId  Int
  orderItemId Int
  modifier    modifier  @relation(fields: [modifierId], references: [id])
  orderItem   orderItem @relation(fields: [orderItemId], references: [id])
}

model kot {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  updatedUserId Int?
  kitchenId     Int?
  status        String      @default("inprogress")
  orderId       Int         @default(1)
  note          String?     @default("")
  Kitchen       kitchen?    @relation(fields: [kitchenId], references: [id])
  order         order       @relation(fields: [orderId], references: [id])
  updatedUser   user?       @relation(fields: [updatedUserId], references: [id])
  orderItems    orderItem[]
}

model company {
  id                    Int      @id @default(autoincrement())
  name                  String
  secondaryLanguageName String   @default("add other laguage")
  logoUrl               String
  lastOrderNumber       Int
  caption               String
  footer                String
  currencyCode          String
  address               String
  lat                   String?  @default("")
  long                  String?  @default("")
  decimalZeros          Int?     @default(3)
  printer               String   @default("Not configured")
  password              String   @default("1234")
  productShortcuts      String[] @default([])
  customerShortcuts     String[] @default([])
  generalNotes          String[] @default([])
  taxes                 tax[]
}

model tax {
  id           Int      @id @default(autoincrement())
  name         String
  printName    String
  isPercentage Boolean  @default(true)
  value        Float
  companyId    Int?
  isActive     Boolean  @default(true)
  company      company? @relation(fields: [companyId], references: [id])
}

model appliedcharges {
  id        Int      @id @default(autoincrement())
  taxId     Int
  orderId   Int
  createdAt DateTime @default(now())
  order     order    @relation(fields: [orderId], references: [id])
}

model floor {
  id     Int     @id @default(autoincrement())
  name   String
  tables table[]
}

model table {
  id         Int          @id @default(autoincrement())
  name       String
  capacity   Int?
  floorId    Int          @default(1)
  orders     order[]
  floor      floor        @relation(fields: [floorId], references: [id])
  tableSeats tableSeats[]
}

model tableSeats {
  id      Int    @id @default(autoincrement())
  name    String
  tableId Int
  table   table  @relation(fields: [tableId], references: [id])
}

model posSession {
  id            Int       @id @default(autoincrement())
  startTime     DateTime  @default(now())
  endTime       DateTime?
  status        String
  createdUserId Int
  initialCash   Float     @default(1)
  createUser    user      @relation(fields: [createdUserId], references: [id])
}

model expense {
  id            Int          @id @default(autoincrement())
  realizedDate  DateTime     @default(now())
  createdAt     DateTime     @default(now())
  createdBy     Int?         @default(1)
  description   String       @default("")
  amount        Float        @default(1)
  paidFromCash  Boolean      @default(true)
  expenseTypeId Int?
  expenseType   expenseType? @relation(fields: [expenseTypeId], references: [id])
}

model expenseType {
  id       Int       @id @default(autoincrement())
  name     String
  expenses expense[]
}

model paymentType {
  id       Int        @id @default(autoincrement())
  name     String
  isDebit  Boolean    @default(true)
  payments payments[]
}

model payments {
  id            Int         @id @default(autoincrement())
  orderId       Int
  paymentTypeId Int
  createdAt     DateTime    @default(now())
  amount        Float
  order         order       @relation(fields: [orderId], references: [id])
  payementType  paymentType @relation(fields: [paymentTypeId], references: [id])
}
